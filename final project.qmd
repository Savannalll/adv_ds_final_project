---
title: "Final Project"
author: "Yixuan Li & Savanna Li"
format: 
  html:
    embed-resources: true
editor: visual
execute:
  warning: false
bibliography: references.bib
---

## 0. Problem Description

## 1. Data Preparation

```{r}
library(tidyverse)
library(readr)
library(here)
library(tidymodels)
library(haven)
library(earth)
library(vip)
```

```{r}
# Import and tidy the data
original_data <- read_csv(
  here("data", "final_cc_data.csv")) %>%
  mutate(sub_pro = tot_ncc_oripop_corr / (tot_cc_oripop_corr + tot_ncc_oripop_corr))

# intuitively pick predictors
final_cc_data <- read_csv(
  here("data", "final_cc_data.csv")) %>%
  select(fipsplace_00, year, tot_cc_oripop_corr, tot_ncc_oripop_corr,
         totnpcc_cc_offenses_vc, totnpcc_ncc_offenses_vc, pctblk) %>%
  mutate(sub_pro = tot_ncc_oripop_corr / (tot_cc_oripop_corr + tot_ncc_oripop_corr))
```

```{r}
# Other Predictors
lead <- read_csv(
  here("data", "final_cc_data.csv")) %>%
  select(fipsplace_00, year, ph1_plc_wtm_wtm_0_r, tetra_corr) %>%
  mutate(cor_year = year + 19) %>%
  select(!year)

cbp <- read_dta("data/data_cbp.dta") %>%
  select(fipsplace_00, year, perc_empl_ctycc_sic0)

income <- read_dta("data/LR_income.dta") %>%
  select(fipsplace_00, year, income)

shblack <- read_dta("data/LR_shblack.dta")

```

```{r}
# Combine data sets
combined_data <- final_cc_data %>%
  left_join(cbp, by = c("fipsplace_00", "year")) %>%
  left_join(income, by = c("fipsplace_00", "year")) %>%
  left_join(shblack, by = c("fipsplace_00", "year")) %>%
  left_join(lead, by = c("fipsplace_00" = "fipsplace_00", "year" = "cor_year")) %>%
  select(-tot_cc_oripop_corr, -tot_ncc_oripop_corr) %>%
  filter(!is.na(sub_pro))

train <- 
  combined_data %>%
  filter(year >= 1979 & year <= 2007)

test <- combined_data %>%
  filter(year >= 2008 & year <= 2014)

# all the variables (random forest importance) 
total_combined_data <- original_data %>%
  left_join(cbp, by = c("fipsplace_00", "year")) %>%
  left_join(income, by = c("fipsplace_00", "year")) %>%
  left_join(shblack, by = c("fipsplace_00", "year")) %>%
  left_join(lead, by = c("fipsplace_00" = "fipsplace_00", "year" = "cor_year")) %>%
  select(-tot_cc_oripop_corr, -tot_ncc_oripop_corr) %>%
  filter(!is.na(sub_pro)) %>%
  select_if(is.numeric) %>%
  select(-cpctfst, -auto, -empag, -empbus, -empcon, -emped, -empfire, -empgov, -empman, -empmin, -emppro,
         -empser, -emptcpu, -emptrd, -exphwy, -medage, -pct5s, -pctfst, -pctoth, -school)
# These are columns with too many missing values

train_total <- total_combined_data %>%
  filter(year >= 1979 & year <= 2007)

test_total <- total_combined_data %>%
  filter(year >= 2008 & year <= 2014)
```

```{r}
suburbanization_rec <- 
  recipe(formula = sub_pro ~., train) %>%
  add_role(fipsplace_00,
           year,
           new_role = "id") %>%
  step_rm(has_role("id")) %>%
  step_impute_median(all_predictors())

folds <- vfold_cv(data = train, v = 10)
```

```{r}
suburbanization_rec_total <- 
  recipe(formula = sub_pro ~., train_total) %>%
  add_role(fipsplace_00,
           year,
           new_role = "id") %>%
  step_rm(has_role("id")) %>%
  step_impute_median(all_predictors())

folds_total <- vfold_cv(data = train_total, v = 10)
```

## Linear Regression

```{r}
# Linear Regression
lm_mod <- linear_reg() |>
  set_mode(mode = "regression") |>
  set_engine(engine = "lm")

lm_wf <- workflow() %>%
  add_recipe(recipe = suburbanization_rec) %>%
  add_model(spec = lm_mod)
  
lm_resamples <- lm_wf %>%
  fit_resamples(
    resamples = folds)

collect_metrics(lm_resamples)
```

## Random Forest

```{r}
# random forest model: tuning
rf_mod <- rand_forest(
  mtry = tune(),
  min_n = tune(),
  trees = 200
  ) |>
  set_mode(mode = "regression") |>
  set_engine(
    engine = "ranger", 
    importance = "impurity",
    num.threads = 4
  )

rf_wf <- workflow() |>
  add_recipe(suburbanization_rec_total) |>
  add_model(rf_mod)

rf_grid <- grid_regular(
  mtry(range = c(1, 15)),
  min_n(range = c(1, 15)),
  levels = 5
)

rf_resamples <- tune_grid(
  rf_wf,
  resamples = folds,
  grid = rf_grid
)

collect_metrics(rf_resamples)

show_best(rf_resamples)

autoplot(rf_resamples)
```

```{r}
# the best random forest model
rf_mod <- 
  rand_forest(
  trees = 200,
  mtry = 15,
  min_n = 1
) |>
  set_mode(mode = "regression") |>
  set_engine(
    engine = "ranger", 
    importance = "impurity",
    num.threads = 4
  )

rf_wf <- 
  workflow() |>
  add_recipe(suburbanization_rec_total) |>
  add_model(rf_mod)

rf_resamples <- 
  rf_wf |>
  fit_resamples(resamples = folds)

collect_metrics(rf_resamples)

```

```{r}
# variable importance
rf_final <- 
  rf_wf |>
  fit(train_total) 

rf_final |>
  extract_fit_parsnip() |>
  vip(num_features = 20) %>%
  .$data |>
  mutate(
    Importance = Importance / max(Importance),
    Variable = fct_reorder(.x = Importance, .f = Variable)
  ) |>
  ggplot(aes(Importance, Variable)) +
  geom_col()
```
